function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        const decoder = new TextDecoder("utf-16le");
        return decoder.decode(new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = /*#__PURE__*/createBase64WorkerFactory('Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi8KICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7CgogIHZhciBmcmVlR2xvYmFsJDEgPSBmcmVlR2xvYmFsOwoKICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqLwogIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmOwoKICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi8KICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwkMSB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwoKICB2YXIgcm9vdCQxID0gcm9vdDsKCiAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovCiAgdmFyIFN5bWJvbCA9IHJvb3QkMS5TeW1ib2w7CgogIHZhciBTeW1ib2wkMSA9IFN5bWJvbDsKCiAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqLwogIHZhciBvYmplY3RQcm90byQxID0gT2JqZWN0LnByb3RvdHlwZTsKCiAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovCiAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8kMS5oYXNPd25Qcm9wZXJ0eTsKCiAgLyoqCiAgICogVXNlZCB0byByZXNvbHZlIHRoZQogICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKQogICAqIG9mIHZhbHVlcy4KICAgKi8KICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmckMSA9IG9iamVjdFByb3RvJDEudG9TdHJpbmc7CgogIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqLwogIHZhciBzeW1Ub1N0cmluZ1RhZyQxID0gU3ltYm9sJDEgPyBTeW1ib2wkMS50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDsKCiAgLyoqCiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuCiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuCiAgICovCiAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7CiAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyQxKSwKICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXTsKCiAgICB0cnkgewogICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXSA9IHVuZGVmaW5lZDsKICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTsKICAgIH0gY2F0Y2ggKGUpIHt9CgogICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nJDEuY2FsbCh2YWx1ZSk7CiAgICBpZiAodW5tYXNrZWQpIHsKICAgICAgaWYgKGlzT3duKSB7CiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWckMV0gPSB0YWc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnJDFdOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqLwogIHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7CgogIC8qKgogICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUKICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZykKICAgKiBvZiB2YWx1ZXMuCiAgICovCiAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7CgogIC8qKgogICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LgogICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuCiAgICovCiAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHsKICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTsKICB9CgogIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi8KICB2YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJywKICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7CgogIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqLwogIHZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCQxID8gU3ltYm9sJDEudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7CgogIC8qKgogICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LgogICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuCiAgICovCiAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkgewogICAgaWYgKHZhbHVlID09IG51bGwpIHsKICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnOwogICAgfQogICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKQogICAgICA/IGdldFJhd1RhZyh2YWx1ZSkKICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7CiAgfQoKICAvKioKICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGAKICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mICJvYmplY3QiLgogICAqCiAgICogQHN0YXRpYwogICAqIEBtZW1iZXJPZiBfCiAgICogQHNpbmNlIDQuMC4wCiAgICogQGNhdGVnb3J5IExhbmcKICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLgogICAqIEBleGFtcGxlCiAgICoKICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7CiAgICogLy8gPT4gdHJ1ZQogICAqCiAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApOwogICAqIC8vID0+IGZhbHNlCiAgICoKICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTsKICAgKiAvLyA9PiBmYWxzZQogICAqLwogIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnOwogIH0KCiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqLwogIHZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJzsKCiAgLyoqCiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuCiAgICoKICAgKiBAc3RhdGljCiAgICogQG1lbWJlck9mIF8KICAgKiBAc2luY2UgNC4wLjAKICAgKiBAY2F0ZWdvcnkgTGFuZwogICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuCiAgICogQGV4YW1wbGUKICAgKgogICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmlzU3ltYm9sKCdhYmMnKTsKICAgKiAvLyA9PiBmYWxzZQogICAqLwogIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7CiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8CiAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7CiAgfQoKICAvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi8KICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xzLzsKCiAgLyoqCiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZQogICAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuCiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLgogICAqLwogIGZ1bmN0aW9uIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpIHsKICAgIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7CgogICAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fQogICAgcmV0dXJuIGluZGV4OwogIH0KCiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqLwogIHZhciByZVRyaW1TdGFydCA9IC9eXHMrLzsKCiAgLyoqCiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLgogICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLgogICAqLwogIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykgewogICAgcmV0dXJuIHN0cmluZwogICAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKQogICAgICA6IHN0cmluZzsKICB9CgogIC8qKgogICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZQogICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcykKICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApCiAgICoKICAgKiBAc3RhdGljCiAgICogQG1lbWJlck9mIF8KICAgKiBAc2luY2UgMC4xLjAKICAgKiBAY2F0ZWdvcnkgTGFuZwogICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLgogICAqIEBleGFtcGxlCiAgICoKICAgKiBfLmlzT2JqZWN0KHt9KTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7CiAgICogLy8gPT4gdHJ1ZQogICAqCiAgICogXy5pc09iamVjdChfLm5vb3ApOwogICAqIC8vID0+IHRydWUKICAgKgogICAqIF8uaXNPYmplY3QobnVsbCk7CiAgICogLy8gPT4gZmFsc2UKICAgKi8KICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkgewogICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7CiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpOwogIH0KCiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovCiAgdmFyIE5BTiA9IDAgLyAwOwoKICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqLwogIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7CgogIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi8KICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTsKCiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovCiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7CgogIC8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovCiAgdmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50OwoKICAvKioKICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLgogICAqCiAgICogQHN0YXRpYwogICAqIEBtZW1iZXJPZiBfCiAgICogQHNpbmNlIDQuMC4wCiAgICogQGNhdGVnb3J5IExhbmcKICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLgogICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci4KICAgKiBAZXhhbXBsZQogICAqCiAgICogXy50b051bWJlcigzLjIpOwogICAqIC8vID0+IDMuMgogICAqCiAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTsKICAgKiAvLyA9PiA1ZS0zMjQKICAgKgogICAqIF8udG9OdW1iZXIoSW5maW5pdHkpOwogICAqIC8vID0+IEluZmluaXR5CiAgICoKICAgKiBfLnRvTnVtYmVyKCczLjInKTsKICAgKiAvLyA9PiAzLjIKICAgKi8KICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkgewogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9CiAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7CiAgICAgIHJldHVybiBOQU47CiAgICB9CiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7CiAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTsKICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjsKICAgIH0KICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7CiAgICB9CiAgICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTsKICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7CiAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSkKICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpCiAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpOwogIH0KCiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovCiAgdmFyIElORklOSVRZID0gMSAvIDAsCiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7CgogIC8qKgogICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLgogICAqCiAgICogQHN0YXRpYwogICAqIEBtZW1iZXJPZiBfCiAgICogQHNpbmNlIDQuMTIuMAogICAqIEBjYXRlZ29yeSBMYW5nCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC4KICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLgogICAqIEBleGFtcGxlCiAgICoKICAgKiBfLnRvRmluaXRlKDMuMik7CiAgICogLy8gPT4gMy4yCiAgICoKICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpOwogICAqIC8vID0+IDVlLTMyNAogICAqCiAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7CiAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgKICAgKgogICAqIF8udG9GaW5pdGUoJzMuMicpOwogICAqIC8vID0+IDMuMgogICAqLwogIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7CiAgICBpZiAoIXZhbHVlKSB7CiAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDsKICAgIH0KICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpOwogICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7CiAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7CiAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7CiAgICB9CiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwOwogIH0KCiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqLwogIHZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJywKICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsCiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsCiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJzsKCiAgLyoqCiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LgogICAqCiAgICogQHN0YXRpYwogICAqIEBtZW1iZXJPZiBfCiAgICogQHNpbmNlIDAuMS4wCiAgICogQGNhdGVnb3J5IExhbmcKICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuCiAgICogQGV4YW1wbGUKICAgKgogICAqIF8uaXNGdW5jdGlvbihfKTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pOwogICAqIC8vID0+IGZhbHNlCiAgICovCiAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yCiAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy4KICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTsKICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7CiAgfQoKICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi8KICB2YXIgTUFYX1NBRkVfSU5URUdFUiQxID0gOTAwNzE5OTI1NDc0MDk5MTsKCiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqLwogIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxkKikkLzsKCiAgLyoqCiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguCiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLgogICAqLwogIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkgewogICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7CiAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIkMSA6IGxlbmd0aDsKCiAgICByZXR1cm4gISFsZW5ndGggJiYKICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHwKICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmCiAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7CiAgfQoKICAvKioKICAgKiBQZXJmb3JtcyBhCiAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybykKICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC4KICAgKgogICAqIEBzdGF0aWMKICAgKiBAbWVtYmVyT2YgXwogICAqIEBzaW5jZSA0LjAuMAogICAqIEBjYXRlZ29yeSBMYW5nCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS4KICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLgogICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuCiAgICogQGV4YW1wbGUKICAgKgogICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9OwogICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07CiAgICoKICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpOwogICAqIC8vID0+IGZhbHNlCiAgICoKICAgKiBfLmVxKCdhJywgJ2EnKTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpOwogICAqIC8vID0+IGZhbHNlCiAgICoKICAgKiBfLmVxKE5hTiwgTmFOKTsKICAgKiAvLyA9PiB0cnVlCiAgICovCiAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7CiAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTsKICB9CgogIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqLwogIHZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTsKCiAgLyoqCiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC4KICAgKgogICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uCiAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS4KICAgKgogICAqIEBzdGF0aWMKICAgKiBAbWVtYmVyT2YgXwogICAqIEBzaW5jZSA0LjAuMAogICAqIEBjYXRlZ29yeSBMYW5nCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC4KICAgKiBAZXhhbXBsZQogICAqCiAgICogXy5pc0xlbmd0aCgzKTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpOwogICAqIC8vID0+IGZhbHNlCiAgICoKICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTsKICAgKiAvLyA9PiBmYWxzZQogICAqCiAgICogXy5pc0xlbmd0aCgnMycpOwogICAqIC8vID0+IGZhbHNlCiAgICovCiAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHsKICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYKICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSOwogIH0KCiAgLyoqCiAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQncwogICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3IKICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLgogICAqCiAgICogQHN0YXRpYwogICAqIEBtZW1iZXJPZiBfCiAgICogQHNpbmNlIDQuMC4wCiAgICogQGNhdGVnb3J5IExhbmcKICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuCiAgICogQGV4YW1wbGUKICAgKgogICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTsKICAgKiAvLyA9PiB0cnVlCiAgICoKICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pOwogICAqIC8vID0+IHRydWUKICAgKgogICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpOwogICAqIC8vID0+IHRydWUKICAgKgogICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTsKICAgKiAvLyA9PiBmYWxzZQogICAqLwogIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTsKICB9CgogIC8qKgogICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC4KICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LgogICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LgogICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsCiAgICogIGVsc2UgYGZhbHNlYC4KICAgKi8KICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkgewogICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4OwogICAgaWYgKHR5cGUgPT0gJ251bWJlcicKICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpCiAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdCkKICAgICAgICApIHsKICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CgogIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi8KICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCwKICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXg7CgogIC8qKgogICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndAogICAqIGNvZXJjZSBhcmd1bWVudHMuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLgogICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuCiAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuCiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuCiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLgogICAqLwogIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHsKICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLAogICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7CgogICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0OwogICAgICBzdGFydCArPSBzdGVwOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIC8qKgogICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LgogICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLgogICAqLwogIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkgewogICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHsKICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHsKICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkOwogICAgICB9CiAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC4KICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7CiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGVuZCA9IHN0YXJ0OwogICAgICAgIHN0YXJ0ID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpOwogICAgICB9CiAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7CiAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTsKICAgIH07CiAgfQoKICAvKioKICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbQogICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlCiAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsCiAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLgogICAqCiAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZwogICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuCiAgICoKICAgKiBAc3RhdGljCiAgICogQHNpbmNlIDAuMS4wCiAgICogQG1lbWJlck9mIF8KICAgKiBAY2F0ZWdvcnkgVXRpbAogICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS4KICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLgogICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS4KICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuCiAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodAogICAqIEBleGFtcGxlCiAgICoKICAgKiBfLnJhbmdlKDQpOwogICAqIC8vID0+IFswLCAxLCAyLCAzXQogICAqCiAgICogXy5yYW5nZSgtNCk7CiAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdCiAgICoKICAgKiBfLnJhbmdlKDEsIDUpOwogICAqIC8vID0+IFsxLCAyLCAzLCA0XQogICAqCiAgICogXy5yYW5nZSgwLCAyMCwgNSk7CiAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV0KICAgKgogICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTsKICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM10KICAgKgogICAqIF8ucmFuZ2UoMSwgNCwgMCk7CiAgICogLy8gPT4gWzEsIDEsIDFdCiAgICoKICAgKiBfLnJhbmdlKDApOwogICAqIC8vID0+IFtdCiAgICovCiAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTsKCiAgdmFyIHJhbmdlJDEgPSByYW5nZTsKCiAgZnVuY3Rpb24gZ2V0R2VuZUJ5Q2VsbFRpbGUodmlldywgewogICAgdGlsZVNpemUsIHRpbGVJLCB0aWxlSiwgbnVtQ2VsbHMsIG51bUdlbmVzLCBjZWxsT3JkZXJpbmcsIGV4cHJlc3Npb25Sb3dMb29rVXAsCiAgfSkgewogICAgY29uc3QgdGlsZURhdGEgPSBuZXcgVWludDhBcnJheSh0aWxlU2l6ZSAqIHRpbGVTaXplKTsKICAgIGxldCBvZmZzZXQ7CiAgICBsZXQgdmFsdWU7CiAgICBsZXQgY2VsbEk7CiAgICBsZXQgZ2VuZUk7CiAgICBsZXQgc29ydGVkQ2VsbEk7CgogICAgY29uc3QgdGlsZVNpemVSYW5nZSA9IHJhbmdlJDEodGlsZVNpemUpOwoKICAgIHRpbGVTaXplUmFuZ2UuZm9yRWFjaCgoaikgPT4gewogICAgICAvLyBOZWVkIHRvIGl0ZXJhdGUgb3ZlciBjZWxscyBpbiB0aGUgb3V0ZXIgbG9vcC4KICAgICAgY2VsbEkgPSAodGlsZUogKiB0aWxlU2l6ZSkgKyBqOwogICAgICBpZiAoY2VsbEkgPCBudW1DZWxscykgewogICAgICAgIHNvcnRlZENlbGxJID0gZXhwcmVzc2lvblJvd0xvb2tVcC5nZXQoY2VsbE9yZGVyaW5nW2NlbGxJXSk7CiAgICAgICAgaWYgKHNvcnRlZENlbGxJID49IC0xKSB7CiAgICAgICAgICB0aWxlU2l6ZVJhbmdlLmZvckVhY2goKGkpID0+IHsKICAgICAgICAgICAgZ2VuZUkgPSAodGlsZUkgKiB0aWxlU2l6ZSkgKyBpOwogICAgICAgICAgICB2YWx1ZSA9IHZpZXdbc29ydGVkQ2VsbEkgKiBudW1HZW5lcyArIGdlbmVJXTsKICAgICAgICAgICAgb2Zmc2V0ID0gKCh0aWxlU2l6ZSAtIGkgLSAxKSAqIHRpbGVTaXplICsgaik7CiAgICAgICAgICAgIHRpbGVEYXRhW29mZnNldF0gPSB2YWx1ZTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gdGlsZURhdGE7CiAgfQoKICBmdW5jdGlvbiBnZXRDZWxsQnlHZW5lVGlsZSh2aWV3LCB7CiAgICB0aWxlU2l6ZSwgdGlsZUksIHRpbGVKLCBudW1DZWxscywgbnVtR2VuZXMsIGNlbGxPcmRlcmluZywgZXhwcmVzc2lvblJvd0xvb2tVcCwKICB9KSB7CiAgICBjb25zdCB0aWxlRGF0YSA9IG5ldyBVaW50OEFycmF5KHRpbGVTaXplICogdGlsZVNpemUpOwogICAgbGV0IG9mZnNldDsKICAgIGxldCB2YWx1ZTsKICAgIGxldCBjZWxsSTsKICAgIGxldCBnZW5lSTsKICAgIGxldCBzb3J0ZWRDZWxsSTsKCiAgICBjb25zdCB0aWxlU2l6ZVJhbmdlID0gcmFuZ2UkMSh0aWxlU2l6ZSk7CgogICAgdGlsZVNpemVSYW5nZS5mb3JFYWNoKChpKSA9PiB7CiAgICAgIC8vIE5lZWQgdG8gaXRlcmF0ZSBvdmVyIGNlbGxzIGluIHRoZSBvdXRlciBsb29wLgogICAgICBjZWxsSSA9ICh0aWxlSSAqIHRpbGVTaXplKSArIGk7CiAgICAgIGlmIChjZWxsSSA8IG51bUNlbGxzKSB7CiAgICAgICAgc29ydGVkQ2VsbEkgPSBleHByZXNzaW9uUm93TG9va1VwLmdldChjZWxsT3JkZXJpbmdbY2VsbEldKTsKICAgICAgICBpZiAoc29ydGVkQ2VsbEkgPj0gLTEpIHsKICAgICAgICAgIHRpbGVTaXplUmFuZ2UuZm9yRWFjaCgoaikgPT4gewogICAgICAgICAgICBnZW5lSSA9ICh0aWxlSiAqIHRpbGVTaXplKSArIGo7CiAgICAgICAgICAgIGlmIChnZW5lSSA8IG51bUdlbmVzKSB7CiAgICAgICAgICAgICAgdmFsdWUgPSB2aWV3W3NvcnRlZENlbGxJICogbnVtR2VuZXMgKyBnZW5lSV07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFsdWUgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9mZnNldCA9ICgodGlsZVNpemUgLSBpIC0gMSkgKiB0aWxlU2l6ZSArIGopOwogICAgICAgICAgICB0aWxlRGF0YVtvZmZzZXRdID0gdmFsdWU7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiB0aWxlRGF0YTsKICB9CgogIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqLwoKICAvKioKICAgKiBNYXAgYSBnZW5lIGV4cHJlc3Npb24gbWF0cml4IG9udG8gbXVsdGlwbGUgc3F1YXJlIGFycmF5IHRpbGVzLAogICAqIHRha2luZyBpbnRvIGFjY291bnQgdGhlIG9yZGVyaW5nL3NlbGVjdGlvbiBvZiBjZWxscy4KICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zCiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jdXJyIFRoZSBjdXJyZW50IHRhc2sgdXVpZC4KICAgKiBAcGFyYW0ge251bWJlcn0gcGFyYW1zLnhUaWxlcyBIb3cgbWFueSB0aWxlcyByZXF1aXJlZCBpbiB0aGUgeCBkaXJlY3Rpb24/CiAgICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtcy55VGlsZXMgSG93IG1hbnkgdGlsZXMgcmVxdWlyZWQgaW4gdGhlIHkgZGlyZWN0aW9uPwogICAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbXMudGlsZVNpemUgSG93IG1hbnkgZW50cmllcyBhbG9uZyBlYWNoIHRpbGUgYXhpcz8KICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXJhbXMuY2VsbE9yZGVyaW5nIFRoZSBjdXJyZW50IG9yZGVyaW5nIG9mIGNlbGxzLgogICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmFtcy5jb2xzIFRoZSBuYW1lIG9mIGVhY2ggY29sdW1uIChnZW5lIElEKS4KICAgKiBEb2VzIG5vdCB0YWtlIHRyYW5zcG9zZSBpbnRvIGFjY291bnQgKGFsd2F5cyBnZW5lcykuCiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gcGFyYW1zLmRhdGEgVGhlIGFycmF5IGJ1ZmZlci4KICAgKiBOZWVkIHRvIHRyYW5zZmVyIGJhY2sgdG8gbWFpbiB0aHJlYWQgd2hlbiBkb25lLgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLnRyYW5zcG9zZSBJcyB0aGUgaGVhdG1hcCB0cmFuc3Bvc2VkPwogICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLmV4cHJlc3Npb25Sb3dMb29rVXAgQSBsb29rdXAgdGFibGUgZm9yIHRoZSBhcnJheSBpbmRleCBvZiBhIGdpdmVuIGNlbGwuCiAgICogVGhpcyBpcyBuZWVkZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgaW5zdGVhZCBvZiBjYWxsaW5nIGBpbmRleE9mYCByZXBlYXRlZGx5LgogICAqIEByZXR1cm5zIHthcnJheX0gW21lc3NhZ2UsIHRyYW5zZmVyc10KICAgKi8KICBmdW5jdGlvbiBnZXRUaWxlKHsKICAgIGN1cnIsCiAgICB0aWxlSSwKICAgIHRpbGVKLAogICAgdGlsZVNpemUsCiAgICBjZWxsT3JkZXJpbmcsCiAgICBjb2xzLAogICAgZGF0YSwKICAgIHRyYW5zcG9zZSwKICAgIGV4cHJlc3Npb25Sb3dMb29rVXAsCiAgfSkgewogICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpOwoKICAgIGNvbnN0IG51bUdlbmVzID0gY29scy5sZW5ndGg7CiAgICBjb25zdCBudW1DZWxscyA9IGNlbGxPcmRlcmluZy5sZW5ndGg7CgogICAgY29uc3QgZ2V0VGlsZUZ1bmN0aW9uID0gKHRyYW5zcG9zZSA/IGdldEdlbmVCeUNlbGxUaWxlIDogZ2V0Q2VsbEJ5R2VuZVRpbGUpOwoKICAgIGNvbnN0IHJlc3VsdCA9IGdldFRpbGVGdW5jdGlvbigKICAgICAgdmlldywKICAgICAgewogICAgICAgIHRpbGVTaXplLAogICAgICAgIHRpbGVJLAogICAgICAgIHRpbGVKLAogICAgICAgIG51bUNlbGxzLAogICAgICAgIG51bUdlbmVzLAogICAgICAgIGNlbGxPcmRlcmluZywKICAgICAgICBleHByZXNzaW9uUm93TG9va1VwLAogICAgICB9LAogICAgKTsKICAgIHJldHVybiBbeyB0aWxlOiByZXN1bHQsIGJ1ZmZlcjogZGF0YSwgY3VyciB9LCBbZGF0YV1dOwogIH0KCiAgLyoqCiAgICogV29ya2VyIG1lc3NhZ2UgcGFzc2luZyBsb2dpYy4KICAgKi8KICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7CiAgICBjb25zdCBuYW1lVG9GdW5jdGlvbiA9IHsKICAgICAgZ2V0VGlsZSwKICAgIH07CgogICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKGV2ZW50KSA9PiB7CiAgICAgIHRyeSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQuZGF0YSkpIHsKICAgICAgICAgIGNvbnN0IFtuYW1lLCBhcmdzXSA9IGV2ZW50LmRhdGE7CiAgICAgICAgICBjb25zdCBbbWVzc2FnZSwgdHJhbnNmZXJzXSA9IG5hbWVUb0Z1bmN0aW9uW25hbWVdKGFyZ3MpOwogICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZShtZXNzYWdlLCB0cmFuc2ZlcnMpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybihlKTsKICAgICAgfQogICAgfSk7CiAgfQoKfSkoKTsKCg==', null, false);
/* eslint-enable */

export { WorkerFactory as HeatmapWorker };
//# sourceMappingURL=index.js.map
